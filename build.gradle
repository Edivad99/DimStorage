plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'edivad.dimstorage'
base.archivesName = "DimStorage-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    if (mappings_channel == 'parchment_previous') {
        mappings channel: 'parchment', version: "${previous_minecraft_version}-${mappings_version}-${minecraft_version}"
    } else if (mappings_channel == 'parchment'){
        mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'dimstorage'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'dimstorage'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dimstorage', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
    maven {
        name 'TOP'
        url 'https://maven.k-4u.nl'
    }
    maven {
        name 'JEI'
        url 'https://maven.blamejared.com/'
    }
    flatDir {
        dir 'libs'
    }
}

dependencies { 
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //implementation fg.deobf("edivad:EdivadLib-${minecraft_version}:1.0.1")
    implementation fg.deobf("curse.maven:edivadlib-638508:${edivadlib_id}")

    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("curse.maven:jade-api-324717:${jade_id_api}")
    //runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "DimStorage",
            "Specification-Vendor": "edivad",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : "edivad",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
