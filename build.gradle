buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'edivad.dimstorage'
archivesBaseName = "DimStorage-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16) // Mojang ships Java 16 to end users, so your mod should target Java 16.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dimstorage', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
    maven {
        name 'TOP'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("curse.maven:jade-api-324717:${jade_id_api}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:${jade_id}")

    // TODO: TEMP
    compileOnly fg.deobf("curse.maven:theoneprobe-245211:3430022")
    runtimeOnly fg.deobf("curse.maven:theoneprobe-245211:3430022")

    //compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    //runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    compileOnly fg.deobf("mezz.jei:jei-1.17.1:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.17.1:${jei_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Specification-Title': 'DimStorage',
            'Specification-Vendor': 'edivad',
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': project.name,
            'Implementation-Version': "${version}",
            'Implementation-Vendor' :'edivad',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
