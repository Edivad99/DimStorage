buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'edivad.dimstorage'
archivesBaseName = "DimStorage-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'dimstorage', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                dimstorage {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'Waila'
        url 'https://maven.tehnut.info'
    }
    maven {
        name 'TOP'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${waila_version}:api")
    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${waila_version}")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Specification-Title': 'DimStorage',
            'Specification-Vendor': 'edivad',
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': project.name,
            'Implementation-Version': "${version}",
            'Implementation-Vendor' :'edivad',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
